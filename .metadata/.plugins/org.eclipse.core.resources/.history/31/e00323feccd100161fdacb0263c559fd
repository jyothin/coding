package p146_lrucache;

import java.util.HashMap;

public class LRUCache {
	HashMap<Integer, Node> cache;
	int capacity;
	int size;
	Node head;
	Node tail;
	
	public LRUCache(int capacity) {
		this.capacity = capacity;
		cache = new HashMap<Integer, Node>(capacity);
		size = 0;
		head = Node(0, 0);
		tail = Node(0, 0);
		head.next = tail;
		head.pre = null;
		tail.pre = head;
		tail.next = null;
	}
	
	public int get(int key) {
		if (cache.containsKey(key)) {
			Node node = cache.get(key);
			int value = node.value;
			deleteNode(node);
			addToHead(node);
			return value;
		}
	}
	
	public void set(int key, int value) {
		if (size < capacity) {
			cache.put(key, value);
		}
		
	}
	
	public class Node {
		int key;
		int value;
		Node pre;
		Node next;
		public Node(int key, int value) {
			this.key = key;
			this.value = value;
		}
	}

}
