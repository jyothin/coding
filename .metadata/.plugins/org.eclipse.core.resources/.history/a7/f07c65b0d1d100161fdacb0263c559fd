package lfucache;

import java.util.HashMap;
import java.util.LinkedHashSet;

public class LFUCache {
	int capacity;
	Node head;
	HashMap<Integer, Integer> vCache;
	HashMap<Integer, Node> nCache;
	
	public LFUCache (int capacity) {
		this.capacity = capacity;
		vCache = new HashMap<Integer, Integer>();
		nCache = new HashMap<Integer, Node>();
	}
	
	public void remove(Node node) {
		if (node.prev == null) {
			head = node.next;
		} else {
			node.prev.next = node.next;
		}
		if (node.next != null) {
			node.next.prev = node.prev;
		}
	}
	
	public void increaseCount(int key) {
		Node node = nCache.get(key);
		node.keys.remove(key);
		
		if (node.next == null) {
			node.next = new Node(node.count+1);
			node.next.prev = node;
			node.next.keys.add(key);
		} else if (node.next.count == node.count+1) {
			node.next.keys.add(key);
		} else {
			Node tNode = new Node(node.count+1);
			tNode.keys.add(key);
			tNode.prev = node;
			tNode.next = node.next;
			node.next.prev = tNode;
			node.next = tNode;
		}
		nCache.put(key, node.next);
		if (node.keys.size() == 0) {
			remove(node);
		}
	}
	
	private void addToHead(int key) {
		if (head == null) {
			head = new Node(0);
			head.keys.add(key);
		} else if (head.count > 0) {
			Node node = new Node(0);
			node.keys.add(key);
			node.next = head;
			head.prev =  node;
			head = node;
		} else {
			head.keys.add(key);
		}
		nCache.put(key, head);
	}
	
	private void removeOld() {
		if (head == null) return;
		int old = 0;
		for (int n; head.keys {
			old = n;
			break;
		}
		head.keys.remove(old);
		if (head.keys.size() == 0) {
			remove(head);
		}
		nCache.remove(old);
		vCache.remove(old);
	}
	
	public int get(int key) {
		if (vCache.containsKey(key)) {
			increaseCount(key);
			return vCache.get(key);
		} else {
			return -1;
		}
	}
	
	public void set(int key, int value) {
		if (capacity == 0) {
			return;
		}
		if (vCache.containsKey(key)) {
			vCache.put(key, value);
		} else {
			if (vCache.size() < capacity) {
				vCache.put(key, value);
			} else {
				removeOld();
				vCache.put(key, value);
			}
			addToHead(key);
		}
		increaseCount(key);
	}
	
	class Node {
		int count = 0;
		LinkedHashSet<Integer> keys = null;
		Node prev;
		Node next;
		public Node (int count) {
			this.count = count;
			keys = new LinkedHashSet<Integer>();
			prev = null;
			next = null;
		}
	}
}
